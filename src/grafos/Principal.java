/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package grafos;

import java.util.ArrayList;
import javax.swing.JOptionPane;

/**
 *
 * @author David
 */
public class Principal extends javax.swing.JFrame {

    /**
     * Creates new form Principal
     */
    public Principal() {
        initComponents();
        setLocationRelativeTo(null);
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Principal");

        panel.setBackground(new java.awt.Color(204, 204, 255));
        panel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        panel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panelMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                panelMousePressed(evt);
            }
        });

        javax.swing.GroupLayout panelLayout = new javax.swing.GroupLayout(panel);
        panel.setLayout(panelLayout);
        panelLayout.setHorizontalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 577, Short.MAX_VALUE)
        );
        panelLayout.setVerticalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 419, Short.MAX_VALUE)
        );

        jButton1.setText("Datos");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jMenu1.setText("Menu");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Crear Arista");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setText("Recolorear Aristas");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem3.setText("Limpiar");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Opciones");

        jMenuItem4.setText("Ver grado del grafo");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuItem7.setText("Grado de un vértice");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem7);

        jMenuItem5.setText("Suma de los grados de los vértices");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem5);

        jMenuItem6.setText("Grado menor entre los vértices");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem6);

        jMenuItem8.setText("Buscar ciclos en el grafo");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem8);

        jMenuItem9.setText("Buscar camino ");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem9);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addGap(144, 144, 144)
                .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton1))
                    .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void panelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelMouseClicked
        // TODO add your handling code here:
        
    }//GEN-LAST:event_panelMouseClicked

    private void panelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelMousePressed
        // TODO add your handling code here:
        int x, y;
        x=evt.getX();
        y=evt.getY();
//        System.out.println("X - "+x+"\nY - "+y);
        figuras.dibujarCirculo(panel.getGraphics(), x, y, Integer.toString(indice));
        vertices.add(new Nodo(x,y,indice));
        indice++;
        
    }//GEN-LAST:event_panelMousePressed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        System.out.println("Relax todavia no esta");
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(this, "El grado del grafo es: "+gradoGrafo());
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:
        int grado=0;
        if(pares.size()>0){
            for (int i = 0; i < vertices.size(); i++) {
                grado=grado+gradoVertice(i);
            }
            JOptionPane.showMessageDialog(this, "La suma de los grados de todos los vértices es: "+grado);
        }
        else{
            JOptionPane.showMessageDialog(this, "No hay aristas en el grafo");
        }
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        // TODO add your handling code here:
        String nodo=JOptionPane.showInputDialog(this,"Ingrese el índice del vértice: ");
        int n1 = Integer.parseInt(nodo);
        while(!nodoExiste(n1)){
            nodo = JOptionPane.showInputDialog(this,"Ingrese un nodo válido: ");
            n1 = Integer.parseInt(nodo);
        }
        JOptionPane.showMessageDialog(this, "El grado del vértice "+n1+" es de: "+gradoVertice(n1));
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        // TODO add your handling code here:
        int gradoMenor=10000;
        int vertice=0;
        for (int i = 0; i <vertices.size(); i++) {
            if(gradoVertice(i)<gradoMenor){
                gradoMenor = gradoVertice(i);
                vertice = vertices.get(i).getIndice();
            }
        }
        JOptionPane.showMessageDialog(this, "El vértice con menor grado es "+vertice+" y su grado es "+gradoMenor+".");
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        panel.repaint();
        indice=0;
        pares.clear();
        vertices.clear();
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        String v1 = JOptionPane.showInputDialog(this,"Ingrese el primer vértice");
        int n1 = Integer.parseInt(v1);
        while(!nodoExiste(n1)){
            v1 = JOptionPane.showInputDialog(this,"Ingrese un nodo válido: ");
            n1 = Integer.parseInt(v1);
        }
        String v2 = JOptionPane.showInputDialog(this,"Ingrese el segundo vértice");
        int n2 = Integer.parseInt(v2);
        while(!nodoExiste(n2) || n1==n2){
            v2 = JOptionPane.showInputDialog(this,"Ingrese un nodo válido: ");
            n2 = Integer.parseInt(v2);
        }
        if(!validacionArista(n1,n2))
        {
            Nodo nodo1 = obtenerNodo(n1);
            Nodo nodo2 = obtenerNodo(n2);
            figuras.dibujarLinea(panel.getGraphics(), nodo1.getCoordenadaX(),nodo1.getCoordenadaY(), nodo2.getCoordenadaX(), nodo2.getCoordenadaY());
            pares.add(new Par(nodo1, nodo2));
            
            figuras.dibujarCirculo(panel.getGraphics(), nodo1.getCoordenadaX(), nodo1.getCoordenadaY(), Integer.toString(nodo1.getIndice()));
            figuras.dibujarCirculo(panel.getGraphics(), nodo2.getCoordenadaX(), nodo2.getCoordenadaY(), Integer.toString(nodo2.getIndice()));
        }
        else{
            JOptionPane.showMessageDialog(this, "Ya existe una arista en ambos vértices");
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        // TODO add your handling code here:
        String nodo1=JOptionPane.showInputDialog(this,"Ingrese el índice del vértice: ");
        int n1 = Integer.parseInt(nodo1);
        while(!nodoExiste(n1)){
            nodo1 = JOptionPane.showInputDialog(this,"Ingrese un nodo válido: ");
            n1 = Integer.parseInt(nodo1);
        }
        String nodo2=JOptionPane.showInputDialog(this,"Ingrese el índice del vértice: ");
        int n2 = Integer.parseInt(nodo2);
        while(!nodoExiste(n2)){
            nodo2 = JOptionPane.showInputDialog(this,"Ingrese un nodo válido: ");
            n2 = Integer.parseInt(nodo2);
        }
        ArrayList <Par> lista = new ArrayList();
        int mayor=0;
        int menor=0;
        if(n1>n2){
            mayor=n1;
            menor=n2;
        }
        else{
            mayor=n2;
            menor=n1;
        }
        
        camino(menor,mayor,lista);
       // System.out.println("Lista - "+lista.toString());
        System.out.println("");
        System.out.println(" ");
        buscarCamino(lista, n1,n2);
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        // TODO add your handling code here:
        String nodo1=JOptionPane.showInputDialog(this,"Ingrese el índice del vértice: ");
        int n1 = Integer.parseInt(nodo1);
        while(!nodoExiste(n1)){
            nodo1 = JOptionPane.showInputDialog(this,"Ingrese un nodo válido: ");
            n1 = Integer.parseInt(nodo1);
        }
        ArrayList <Par> lista = new ArrayList();
        camino(n1,n1,lista);
        System.out.println("Lista = "+lista.toString());
        buscarCiclo(lista,n1);
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        recolorearAristas();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
            new Principal().setVisible(true);
            }
        });
    }
    
    
    
    public void buscarCiclo(ArrayList <Par> lista, int inicio){
        ArrayList<Nodo> nodos = new ArrayList();
        nodos.add(buscarNodo(inicio));
        int cont = 0;
        Nodo actual;
        actual = new Nodo(lista.get(cont).getNodo2().getIndice());
        nodos.add(actual);  
        while(!(validacionArista(inicio,nodos.get(cont).getIndice())) && cont<lista.size()-1){
            cont++;
            actual = new Nodo(lista.get(cont).getNodo2().getIndice());
            nodos.add(actual);
            
        }
        //System.out.println("Vertices finales - "+nodos.toString() );
        for (int i = 0; i < nodos.size()-1; i++) {
            Nodo primero = buscarNodo(nodos.get(i).getIndice());
            Nodo segundo = buscarNodo(nodos.get(i+1).getIndice());
            figuras.dibujarCamino(panel.getGraphics(), primero.getCoordenadaX(), primero.getCoordenadaY(), segundo.getCoordenadaX(), segundo.getCoordenadaY());
        }
        Nodo primero = buscarNodo(nodos.get(0).getIndice());
        Nodo segundo = buscarNodo(nodos.get(nodos.size()-1).getIndice());
        figuras.dibujarCamino(panel.getGraphics(), primero.getCoordenadaX(), primero.getCoordenadaY(), segundo.getCoordenadaX(), segundo.getCoordenadaY());
    }
    
    
    public void recolorearAristas(){
        for (int i = 0; i < pares.size(); i++) {
            Nodo primero = pares.get(i).getNodo1();
            Nodo segundo = pares.get(i).getNodo2();
            figuras.dibujarLinea(panel.getGraphics(), primero.getCoordenadaX(), primero.getCoordenadaY(), segundo.getCoordenadaX(), segundo.getCoordenadaY());
        }
    }
            
    
    public void buscarCamino(ArrayList <Par> lista, int inicio, int fin){
        
       if(validacionArista(fin,lista.get(lista.size()-1).getNodo1().getIndice())==true){
          // System.out.println("Nodo 1 "+lista.get(lista.size()-1).getNodo1().getIndice());
           Nodo primero = buscarNodo(inicio);
           Nodo segundo = buscarNodo(lista.get(lista.size()-1).getNodo1().getIndice());
           Nodo tercero = buscarNodo(fin);
           figuras.dibujarCamino(panel.getGraphics(), primero.getCoordenadaX(), primero.getCoordenadaY(), segundo.getCoordenadaX(), segundo.getCoordenadaY());
           figuras.dibujarCamino(panel.getGraphics(), segundo.getCoordenadaX(), segundo.getCoordenadaY(), tercero.getCoordenadaX(), tercero.getCoordenadaY());
       }
       if(validacionArista(fin,lista.get(lista.size()-1).getNodo2().getIndice())==true){
           
           Nodo primero = buscarNodo(inicio);
           Nodo segundo = buscarNodo(lista.get(lista.size()-1).getNodo2().getIndice());
           Nodo tercero = buscarNodo(fin);
           figuras.dibujarCamino(panel.getGraphics(), primero.getCoordenadaX(), primero.getCoordenadaY(), segundo.getCoordenadaX(), segundo.getCoordenadaY());
           figuras.dibujarCamino(panel.getGraphics(), segundo.getCoordenadaX(), segundo.getCoordenadaY(), tercero.getCoordenadaX(), tercero.getCoordenadaY());
       }
       else{
            try{
                ArrayList <Nodo> vertices  = new ArrayList();
                vertices.add(new Nodo(inicio));
                int cont = 0;
                Nodo actual;
                actual = new Nodo(lista.get(cont).getNodo2().getIndice());
                vertices.add(actual);
                while(!(actual.getIndice()==fin)){
                  //  System.out.println("Actual - "+actual.toString());
                    cont++;
                    actual = new Nodo(lista.get(cont).getNodo2().getIndice());
                    vertices.add(actual);
                    //System.out.println("Este es vertices "+vertices.toString());           
                }

                if((vertices.get(0).getIndice()== inicio) && (vertices.get(vertices.size()-1).getIndice()==fin)){
                    for (int i = 0; i < vertices.size()-1; i++) {
                        Nodo primero = buscarNodo(vertices.get(i).getIndice());
                        Nodo segundo = buscarNodo(vertices.get(i+1).getIndice());
                        figuras.dibujarCamino(panel.getGraphics(), primero.getCoordenadaX(), primero.getCoordenadaY(), segundo.getCoordenadaX(), segundo.getCoordenadaY());
                    }
                }
                else{
                    JOptionPane.showMessageDialog(this, "No hay un camino valido para los indices que ingresó");
                }
            }catch(Exception e){
                
            }
       }
        
    }
    
    public Nodo buscarNodo(int indice){
        Nodo nodo = new Nodo();
        for (int i = 0; i < pares.size(); i++) {
            if(pares.get(i).getNodo1().getIndice()==indice){
                nodo = pares.get(i).getNodo1();
                break;
            }
            if(pares.get(i).getNodo2().getIndice()==indice){
                nodo = pares.get(i).getNodo2();
                break;
            }
            
        }
        return nodo;
    }
    
    
    public boolean camino (int nodo1, int nodo2, ArrayList<Par> lista){
        if(nodo2<vertices.size() && nodo1<vertices.size()){
            for (int i = nodo1; i < vertices.size()-1; i++) {
                if(validacionArista(nodo1, i+1)){
                    lista.add(new Par(new Nodo(nodo1), new Nodo(i+1)));
                    if(i+2==nodo2){
                        i=1000;  
                    }
                    else{
                        camino(i+1,i+2,lista);
                    }
                }
            }
            
        }
        //System.out.println("vez "+lista.toString());
        return false;
    }
    
    public int gradoVertice(int n1){
        int grado=0;
        for (int i = 0; i < pares.size(); i++) {
            int nodo1 = pares.get(i).getNodo1().getIndice();
            int nodo2 = pares.get(i).getNodo2().getIndice();
            if(nodo1==n1 || nodo2==n1){
                grado++;
            }
        }
        return grado;
    }
            
    
    public boolean validacionArista(int v1, int v2){
        boolean existeArista=false;
        for (int i = 0; i < pares.size(); i++) {
            int n1=pares.get(i).getNodo1().getIndice();
            int n2=pares.get(i).getNodo2().getIndice();
            if((v1==n1 && v2==n2) || (v1==n2 && v2==n1)){
                existeArista=true;
                break;
            }
        }
        return existeArista;
    }
    
    public Nodo obtenerNodo(int indice){
        Nodo nodo = new Nodo();
        for (int i = 0; i < vertices.size(); i++) {
            if(vertices.get(i).getIndice()==indice){
                nodo = vertices.get(i);
                break;
                
            }
        }
       return nodo;
    }
    
    public boolean nodoExiste(int indice){
        boolean existe=false;
        for (int i = 0; i < vertices.size(); i++) {
            if(vertices.get(i).getIndice()==indice){
                existe=true;
            }
        }
        return existe;
    }
    
    public int gradoGrafo(){
        int grado=0;
        int aux=0;
        for (int i = 0; i <indice-1; i++) {
            for (int j = 0; j <pares.size(); j++) {
                Par par = pares.get(j);
                Nodo nodo1=par.getNodo1();
                Nodo nodo2=par.getNodo2();
                if(nodo1.getIndice()==i || nodo2.getIndice()==i){
                    aux++;
                }
            }
            if(aux>grado){
                grado=aux;
                aux=0;
            }
            aux=0;
        }
        return grado;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPanel panel;
    // End of variables declaration//GEN-END:variables


Figuras figuras=new Figuras();
int indice=0;
ArrayList <Par> pares = new ArrayList();
ArrayList <Nodo> vertices = new ArrayList();

}